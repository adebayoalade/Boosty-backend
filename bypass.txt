// Login
router.post("/login", async (req, res) => {
  try {
    const { username, password } = req.body;

    // Validate input
    if (!username || !password) {
      return res.status(400).json({ message: "Username and password are required" });
    }

    // First find the user in our database to get their Clerk ID
    const user = await User.findOne({ username });
    
    if (!user) {
      return res.status(401).json("User does not exist");
    }

    try {
      // Use Clerk's backend API to verify the password
      await clerk.users.verifyPassword({
        userId: user.clerkId,
        password: password
      });
    } catch (error) {
      return res.status(401).json("Invalid credentials");
    }

    // If we get here, password is verified
    // Generate tokens
    const accessToken = jwt.sign(
      {
        id: user._id,
        isAdmin: user.isAdmin,
      },
      process.env.JWT_SEC,
      { expiresIn: "15m" }
    );

    const refreshToken = jwt.sign(
      {
        id: user._id,
        isAdmin: user.isAdmin,
      },
      process.env.JWT_REFRESH_SEC,
      { expiresIn: "1d" }
    );

    const { password: userPassword, ...others } = user._doc;

    // Store refresh token
    await User.findByIdAndUpdate(user._id, { refreshToken });

    // Respond with the user data and tokens
    res.status(200).json({ ...others, accessToken, refreshToken });

  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ message: "Login failed" });
  }
});



