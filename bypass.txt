// Login
router.post("/login", async (req, res) => {
  try {
    const { username, password } = req.body;

    // Validate input
    if (!username || !password) {
      return res.status(400).json({ message: "Username and password are required" });
    }

    // First find the user in our database to get their Clerk ID
    const user = await User.findOne({ username });
    
    if (!user) {
      return res.status(401).json("User does not exist");
    }

    try {
      // Use Clerk's backend API to verify the password
      await clerk.users.verifyPassword({
        userId: user.clerkId,
        password: password
      });
    } catch (error) {
      return res.status(401).json("Invalid credentials");
    }

    // If we get here, password is verified
    // Generate tokens
    const accessToken = jwt.sign(
      {
        id: user._id,
        isAdmin: user.isAdmin,
      },
      process.env.JWT_SEC,
      { expiresIn: "15m" }
    );

    const refreshToken = jwt.sign(
      {
        id: user._id,
        isAdmin: user.isAdmin,
      },
      process.env.JWT_REFRESH_SEC,
      { expiresIn: "1d" }
    );

    const { password: userPassword, ...others } = user._doc;

    // Store refresh token
    await User.findByIdAndUpdate(user._id, { refreshToken });

    // Respond with the user data and tokens
    res.status(200).json({ ...others, accessToken, refreshToken });

  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ message: "Login failed" });
  }
});



router.post("/register", async (req, res) => {
  try {
    let { emailAddress, username, password } = req.body;
    const email = Array.isArray(emailAddress) ? emailAddress[0] : emailAddress;

    if (!validateInputs(email, username, password)) {
      return res.status(400).json({ message: "Invalid input format" });
    }

    // Create user in Clerk with explicit email verification settings
    const clerkUser = await clerk.users.createUser({
      emailAddress: [email],
      username,
      password,
      verifications: {
        emailAddress: {
          strategy: "email_code"
        }
      }
    });

    const newUser = new User({
      clerkId: clerkUser.id,
      username,
      email,
      isVerified: false,
    });

    await newUser.save();

    res.status(201).json({
      message: "Registration successful! Please check your email for a verification code.",
      instructions: [
        "1. Check your email inbox (and spam folder) for a message from Clerk",
        "2. Copy the verification code from the email",
        "3. Use that code along with your userId to verify your email"
      ],
      userId: clerkUser.id,
      email: email
    });

  } catch (error) {
    handleError(res, error);
  }
});




Clerk instance: {
  __experimental_accountlessApplications: AccountlessApplicationAPI { request: [AsyncFunction (anonymous)] },
  allowlistIdentifiers: AllowlistIdentifierAPI { request: [AsyncFunction (anonymous)] },
  clients: ClientAPI { request: [AsyncFunction (anonymous)] },
  emailAddresses: EmailAddressAPI { request: [AsyncFunction (anonymous)] },
  invitations: InvitationAPI { request: [AsyncFunction (anonymous)] },
  organizations: OrganizationAPI { request: [AsyncFunction (anonymous)] },
  phoneNumbers: PhoneNumberAPI { request: [AsyncFunction (anonymous)] },
  redirectUrls: RedirectUrlAPI { request: [AsyncFunction (anonymous)] },
  sessions: SessionAPI { request: [AsyncFunction (anonymous)] },
  signInTokens: SignInTokenAPI { request: [AsyncFunction (anonymous)] },
  users: UserAPI { request: [AsyncFunction (anonymous)] },
  domains: DomainAPI { request: [AsyncFunction (anonymous)] },
  samlConnections: SamlConnectionAPI { request: [AsyncFunction (anonymous)] },
  testingTokens: TestingTokenAPI { request: [AsyncFunction (anonymous)] },
  authenticateRequest: [Function: authenticateRequest2],
  debugRequestState: [Function: debugRequestState],
  telemetry: TelemetryCollector {}
}
Available methods: [
  '__experimental_accountlessApplications',
  'allowlistIdentifiers',
  'clients',
  'emailAddresses',
  'invitations',
  'organizations',
  'phoneNumbers',
  'redirectUrls',
  'sessions',
  'signInTokens',
  'users',
  'domains',
  'samlConnections',
  'testingTokens',
  'authenticateRequest',
  'debugRequestState',
  'telemetry'
]




router.post("/verify-email", limiter, async (req, res) => {
  try {
    const { code, userId } = req.body;

    if (!code || !userId) {
      return res.status(400).json({ error: "Verification code and userId are required" });
    }

    // Attempt verification using raw request method
    const verification = await clerk.users.request('verifyEmailAddress', {
      userId: userId,
      code: code
    });

    if (verification.status === "verified") {
      const user = await User.findOne({ clerkId: userId });
      if (user) {
        user.isVerified = true;
        await user.save();
      }

      return res.status(200).json({
        message: "Email verified successfully",
        verified: true,
      });
    }

    res.status(400).json({
      message: "Verification failed",
      verified: false,
    });

  } catch (error) {
    console.error("Verification error:", error);
    res.status(500).json({
      message: "Verification failed",
      error: error.message,
    });
  }
});


