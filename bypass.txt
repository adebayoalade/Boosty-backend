// Login
router.post("/login", async (req, res) => {
  try {
    const { username, password } = req.body;

    // Validate input
    if (!username || !password) {
      return res.status(400).json({ message: "Username and password are required" });
    }

    // First find the user in our database to get their Clerk ID
    const user = await User.findOne({ username });
    
    if (!user) {
      return res.status(401).json("User does not exist");
    }

    try {
      // Use Clerk's backend API to verify the password
      await clerk.users.verifyPassword({
        userId: user.clerkId,
        password: password
      });
    } catch (error) {
      return res.status(401).json("Invalid credentials");
    }

    // If we get here, password is verified
    // Generate tokens
    const accessToken = jwt.sign(
      {
        id: user._id,
        isAdmin: user.isAdmin,
      },
      process.env.JWT_SEC,
      { expiresIn: "15m" }
    );

    const refreshToken = jwt.sign(
      {
        id: user._id,
        isAdmin: user.isAdmin,
      },
      process.env.JWT_REFRESH_SEC,
      { expiresIn: "1d" }
    );

    const { password: userPassword, ...others } = user._doc;

    // Store refresh token
    await User.findByIdAndUpdate(user._id, { refreshToken });

    // Respond with the user data and tokens
    res.status(200).json({ ...others, accessToken, refreshToken });

  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ message: "Login failed" });
  }
});



router.post("/login", limiter, async (req, res) => {
  try {
    const { username, password } = req.body;

    if (!username || !password) {
      return res.status(400).json({ message: "Username and password are required" });
    }

    const signInAttempt = await clerk.signIn.create({
      identifier: username,
      password,
    });

    if (signInAttempt.status === "needs_second_factor") {
      return res.status(202).json({ 
        message: "MFA required",
        signInId: signInAttempt.id
      });
    }

    if (signInAttempt.status !== "complete") {
      return res.status(401).json({ message: "Invalid credentials" });
    }

    return await completeSignIn(signInAttempt, username, res);

  } catch (error) {
    res.status(500).json({ message: "Login failed" });
  }
});

// MFA Verification Route
router.post("/verify-mfa", limiter, async (req, res) => {
  try {
    const { signInId, mfaCode, username } = req.body;

    if (!signInId || !mfaCode || !username) {
      return res.status(400).json({ message: "All fields are required" });
    }

    const signInAttempt = await clerk.signIn.get(signInId);
    
    if (!signInAttempt || new Date(signInAttempt.expireAt) < new Date()) {
      return res.status(401).json({ message: "MFA attempt expired" });
    }

    if (signInAttempt.totalAttempts >= MAX_MFA_ATTEMPTS) {
      return res.status(401).json({ message: "Maximum MFA attempts exceeded" });
    }

    const mfaVerification = await clerk.signIn.attemptSecondFactor({
      signInId,
      strategy: "totp",
      code: mfaCode,
    });

    if (mfaVerification.status !== "complete") {
      return res.status(401).json({ message: "Invalid MFA code" });
    }

    return await completeSignIn(mfaVerification, username, res);

  } catch (error) {
    res.status(500).json({ message: "MFA verification failed" });
  }
});

// MFA Setup Route
router.post("/setup-mfa", async (req, res) => {
  try {
    const { username } = req.body;
    const user = await User.findOne({ username });

    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    const factor = await clerk.users.createTOTP(user.clerkId);
    
    res.json({
      otpAuthUri: factor.otpAuthUri,
      factorId: factor.id,
    });

  } catch (error) {
    res.status(500).json({ message: "MFA setup failed" });
  }
});

// MFA Verification for Setup
router.post("/verify-mfa-setup", async (req, res) => {
  try {
    const { username, factorId, code } = req.body;

    if (!username || !factorId || !code) {
      return res.status(400).json({ message: "All fields are required" });
    }

    const user = await User.findOne({ username });
    
    if (!user) {
      return res.status(404).json({ message: "User not found" });
    }

    await clerk.users.verifyTOTP({
      userId: user.clerkId,
      factorId,
      code,
    });

    res.json({ message: "MFA setup completed successfully" });

  } catch (error) {
    res.status(500).json({ message: "MFA setup verification failed" });
  }
});

// Helper function to complete sign in process
async function completeSignIn(signInAttempt, username, res) {
  const user = await User.findOne({ username });

  if (!user) {
    return res.status(401).json({ message: "User does not exist" });
  }

  const accessToken = jwt.sign(
    {
      id: user._id,
      isAdmin: user.isAdmin,
    },
    process.env.JWT_SEC,
    { expiresIn: "15m" }
  );

  const refreshToken = jwt.sign(
    {
      id: user._id,
      isAdmin: user.isAdmin,
    },
    process.env.JWT_REFRESH_SEC,
    { expiresIn: "1d" }
  );

  await User.findByIdAndUpdate(user._id, { refreshToken });

  const { password, refreshToken: storedRefreshToken, ...others } = user._doc;
  return res.status(200).json({ ...others, accessToken });
}




